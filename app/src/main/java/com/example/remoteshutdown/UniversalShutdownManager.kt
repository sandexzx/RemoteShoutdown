package com.example.remoteshutdown

import android.util.Log
import kotlinx.coroutines.async
import kotlinx.coroutines.withContext
import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.withTimeoutOrNull

/**
 * üöÄ Universal Shutdown Manager
 * –£–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –û–° –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ—Ç–æ–¥
 */
class UniversalShutdownManager {
    companion object {
        private const val TAG = "UniversalShutdownManager"
        private const val DETECTION_TIMEOUT = 5000L // 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –û–°
    }
    
    private val sshManager = SSHManager()
    private val windowsManager = WindowsManager()
    
    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –û–° –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç shutdown
     */
    suspend fun executeShutdown(preferredOS: OSType = OSType.AUTO): ShutdownResult {
        return when (preferredOS) {
            OSType.UBUNTU -> executeUbuntuShutdown()
            OSType.WINDOWS -> executeWindowsShutdown()
            OSType.AUTO -> executeAutoShutdown()
        }
    }
    
    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –û–° –∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ
     */
    private suspend fun executeAutoShutdown(): ShutdownResult {
        Log.d(TAG, "üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –û–°...")
        
        return coroutineScope {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            val ubuntuCheck = async { 
                withTimeoutOrNull(DETECTION_TIMEOUT) { 
                    checkUbuntuAvailability() 
                } ?: false 
            }
            
            val windowsCheck = async { 
                withTimeoutOrNull(DETECTION_TIMEOUT) { 
                    windowsManager.checkServerHealth() 
                } ?: false 
            }
            
            val ubuntuAvailable = ubuntuCheck.await()
            val windowsAvailable = windowsCheck.await()
            
            Log.d(TAG, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏: Ubuntu=$ubuntuAvailable, Windows=$windowsAvailable")
            
            when {
                windowsAvailable && ubuntuAvailable -> {
                    Log.d(TAG, "ü§î –û–±–µ –û–° –¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç Windows")
                    executeWindowsShutdown()
                }
                windowsAvailable -> {
                    Log.d(TAG, "ü™ü –í—ã–±—Ä–∞–Ω–∞ Windows")
                    executeWindowsShutdown()
                }
                ubuntuAvailable -> {
                    Log.d(TAG, "üêß –í—ã–±—Ä–∞–Ω–∞ Ubuntu")
                    executeUbuntuShutdown()
                }
                else -> {
                    Log.e(TAG, "‚ùå –ù–∏ –æ–¥–Ω–∞ –û–° –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
                    ShutdownResult.Error("–ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å —Å–µ—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
                }
            }
        }
    }
    
    /**
     * –í—ã–∫–ª—é—á–µ–Ω–∏–µ Ubuntu —á–µ—Ä–µ–∑ SSH
     */
    private suspend fun executeUbuntuShutdown(): ShutdownResult {
        Log.d(TAG, "üêß –í—ã–∫–ª—é—á–∞–µ–º Ubuntu —á–µ—Ä–µ–∑ SSH...")
        
        return try {
            val success = sshManager.executeShutdown()
            if (success) {
                ShutdownResult.Success("Ubuntu –∫–æ–º–ø—å—é—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω!", OSType.UBUNTU)
            } else {
                ShutdownResult.Error("–û—à–∏–±–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ubuntu")
            }
        } catch (e: Exception) {
            Log.e(TAG, "Ubuntu shutdown exception: ${e.message}", e)
            ShutdownResult.Error("–û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è Ubuntu: ${e.message}")
        }
    }
    
    /**
     * –í—ã–∫–ª—é—á–µ–Ω–∏–µ Windows —á–µ—Ä–µ–∑ HTTP API
     */
    private suspend fun executeWindowsShutdown(): ShutdownResult {
        Log.d(TAG, "ü™ü –í—ã–∫–ª—é—á–∞–µ–º Windows —á–µ—Ä–µ–∑ HTTP API...")
        
        return try {
            val success = windowsManager.executeShutdown(delay = 10, force = true)
            if (success) {
                ShutdownResult.Success("Windows –∫–æ–º–ø—å—é—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω!", OSType.WINDOWS)
            } else {
                ShutdownResult.Error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Windows —Å–µ—Ä–≤–µ—Ä—É")
            }
        } catch (e: Exception) {
            Log.e(TAG, "Windows shutdown exception: ${e.message}", e)
            ShutdownResult.Error("–û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è Windows: ${e.message}")
        }
    }
    
    /**
     * –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è Windows –ø–æ–∫–∞)
     */
    suspend fun executeRestart(osType: OSType = OSType.AUTO): ShutdownResult {
        return when (osType) {
            OSType.WINDOWS -> {
                try {
                    val success = windowsManager.executeRestart()
                    if (success) {
                        ShutdownResult.Success("Windows –∫–æ–º–ø—å—é—Ç–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è!", OSType.WINDOWS)
                    } else {
                        ShutdownResult.Error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ Windows")
                    }
                } catch (e: Exception) {
                    ShutdownResult.Error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: ${e.message}")
                }
            }
            OSType.AUTO -> {
                // –í —Ä–µ–∂–∏–º–µ –∞–≤—Ç–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º Windows
                if (windowsManager.checkServerHealth()) {
                    executeRestart(OSType.WINDOWS)
                } else {
                    ShutdownResult.Error("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Windows")
                }
            }
            else -> ShutdownResult.Error("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è Windows")
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ubuntu (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
     */
    private suspend fun checkUbuntuAvailability(): Boolean {
        return try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ checkConnection –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ SSH
            sshManager.checkConnection()
        } catch (e: Exception) {
            // –õ—é–±–∞—è –æ—à–∏–±–∫–∞ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ SSH –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ubuntu: ${e.message}")
            false
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
     */
    suspend fun getSystemStatus(): SystemStatus {
        return coroutineScope {
            val ubuntuCheck = async { 
                withTimeoutOrNull(DETECTION_TIMEOUT) { 
                    checkUbuntuAvailability() 
                } ?: false 
            }
            
            val windowsCheck = async { 
                withTimeoutOrNull(DETECTION_TIMEOUT) { 
                    windowsManager.checkServerHealth() 
                } ?: false 
            }
            
            SystemStatus(
                ubuntuAvailable = ubuntuCheck.await(),
                windowsAvailable = windowsCheck.await()
            )
        }
    }
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏—è
 */
sealed class ShutdownResult {
    data class Success(val message: String, val osType: OSType) : ShutdownResult()
    data class Error(val message: String) : ShutdownResult()
}

/**
 * –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º
 */
data class SystemStatus(
    val ubuntuAvailable: Boolean,
    val windowsAvailable: Boolean
) {
    val hasAnySystem: Boolean get() = ubuntuAvailable || windowsAvailable
    val hasBothSystems: Boolean get() = ubuntuAvailable && windowsAvailable
}
