package com.example.remoteshutdown

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import android.util.Log
import java.io.BufferedReader
import java.io.InputStreamReader
import java.io.OutputStreamWriter
import java.net.HttpURLConnection
import java.net.URL
import org.json.JSONObject

/**
 * ü™ü Windows Manager - –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Flask —Å–µ—Ä–≤–µ—Ä–æ–º
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–∏–Ω–¥—É –¥–ª—è shutdown/restart
 */
class WindowsManager {
    companion object {
        private const val TAG = "WindowsManager"
        private const val HOST = "192.168.8.101"  // IP —Ç–≤–æ–µ–≥–æ –∫–æ–º–ø–∞
        private const val PORT = 8888             // –ü–æ—Ä—Ç Flask —Å–µ—Ä–≤–µ—Ä–∞
        private const val SECRET_KEY = "zverev_shutdown_2025"  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        private const val TIMEOUT = 10000  // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Windows —Å–µ—Ä–≤–µ—Ä–∞
     */
    suspend fun checkServerHealth(): Boolean {
        return withContext(Dispatchers.IO) {
            try {
                Log.d(TAG, "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ Windows —Å–µ—Ä–≤–µ—Ä–∞...")
                
                val url = URL("http://$HOST:$PORT/health")
                val connection = url.openConnection() as HttpURLConnection
                
                connection.apply {
                    requestMethod = "GET"
                    connectTimeout = TIMEOUT
                    readTimeout = TIMEOUT
                    setRequestProperty("User-Agent", "RemoteShutdown-Android/1.0")
                }
                
                val responseCode = connection.responseCode
                Log.d(TAG, "Health check response code: $responseCode")
                
                if (responseCode == 200) {
                    val response = connection.inputStream.bufferedReader().readText()
                    Log.d(TAG, "Health response: $response")
                    
                    // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
                    val jsonResponse = JSONObject(response)
                    val status = jsonResponse.getString("status")
                    val hasAdminRights = jsonResponse.optBoolean("admin_rights", false)
                    
                    Log.d(TAG, "Server status: $status, admin rights: $hasAdminRights")
                    
                    return@withContext status == "ok" && hasAdminRights
                } else {
                    Log.e(TAG, "Health check failed with code: $responseCode")
                    return@withContext false
                }
                
            } catch (e: Exception) {
                Log.e(TAG, "Health check exception: ${e.message}", e)
                return@withContext false
            }
        }
    }
    
    /**
     * –í—ã–∫–ª—é—á–∞–µ–º Windows –∫–æ–º–ø—å—é—Ç–µ—Ä —á–µ—Ä–µ–∑ Flask API
     */
    suspend fun executeShutdown(delay: Int = 10, force: Boolean = true): Boolean {
        return withContext(Dispatchers.IO) {
            try {
                Log.d(TAG, "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º shutdown –∫–æ–º–∞–Ω–¥—É –Ω–∞ Windows...")
                
                val url = URL("http://$HOST:$PORT/shutdown")
                val connection = url.openConnection() as HttpURLConnection
                
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º POST –∑–∞–ø—Ä–æ—Å
                connection.apply {
                    requestMethod = "POST"
                    connectTimeout = TIMEOUT
                    readTimeout = TIMEOUT
                    doOutput = true
                    setRequestProperty("Content-Type", "application/json")
                    setRequestProperty("Authorization", "Bearer $SECRET_KEY")
                    setRequestProperty("User-Agent", "RemoteShutdown-Android/1.0")
                }
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º JSON payload
                val jsonPayload = JSONObject().apply {
                    put("delay", delay)
                    put("force", force)
                }
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                val writer = OutputStreamWriter(connection.outputStream)
                writer.write(jsonPayload.toString())
                writer.flush()
                writer.close()
                
                val responseCode = connection.responseCode
                Log.d(TAG, "Shutdown response code: $responseCode")
                
                // –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
                val response = if (responseCode < 400) {
                    connection.inputStream.bufferedReader().readText()
                } else {
                    connection.errorStream?.bufferedReader()?.readText() ?: "Unknown error"
                }
                
                Log.d(TAG, "Shutdown response: $response")
                
                if (responseCode == 200) {
                    val jsonResponse = JSONObject(response)
                    val status = jsonResponse.getString("status")
                    val message = jsonResponse.optString("message", "")
                    
                    Log.d(TAG, "Shutdown —É—Å–ø–µ—à–Ω–æ: $message")
                    return@withContext status == "success"
                } else {
                    Log.e(TAG, "Shutdown failed with code: $responseCode, response: $response")
                    return@withContext false
                }
                
            } catch (e: Exception) {
                Log.e(TAG, "Shutdown exception: ${e.message}", e)
                return@withContext false
            }
        }
    }
    
    /**
     * –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º Windows –∫–æ–º–ø—å—é—Ç–µ—Ä (–±–æ–Ω—É—Å)
     */
    suspend fun executeRestart(delay: Int = 10, force: Boolean = true): Boolean {
        return withContext(Dispatchers.IO) {
            try {
                Log.d(TAG, "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º restart –∫–æ–º–∞–Ω–¥—É –Ω–∞ Windows...")
                
                val url = URL("http://$HOST:$PORT/restart")
                val connection = url.openConnection() as HttpURLConnection
                
                connection.apply {
                    requestMethod = "POST"
                    connectTimeout = TIMEOUT
                    readTimeout = TIMEOUT
                    doOutput = true
                    setRequestProperty("Content-Type", "application/json")
                    setRequestProperty("Authorization", "Bearer $SECRET_KEY")
                    setRequestProperty("User-Agent", "RemoteShutdown-Android/1.0")
                }
                
                val jsonPayload = JSONObject().apply {
                    put("delay", delay)
                    put("force", force)
                }
                
                val writer = OutputStreamWriter(connection.outputStream)
                writer.write(jsonPayload.toString())
                writer.flush()
                writer.close()
                
                val responseCode = connection.responseCode
                val response = if (responseCode < 400) {
                    connection.inputStream.bufferedReader().readText()
                } else {
                    connection.errorStream?.bufferedReader()?.readText() ?: "Unknown error"
                }
                
                Log.d(TAG, "Restart response: $response")
                
                if (responseCode == 200) {
                    val jsonResponse = JSONObject(response)
                    val status = jsonResponse.getString("status")
                    return@withContext status == "success"
                } else {
                    Log.e(TAG, "Restart failed with code: $responseCode")
                    return@withContext false
                }
                
            } catch (e: Exception) {
                Log.e(TAG, "Restart exception: ${e.message}", e)
                return@withContext false
            }
        }
    }
    
    /**
     * –û—Ç–º–µ–Ω—è–µ–º shutdown (–µ—Å–ª–∏ –µ—â–µ –º–æ–∂–Ω–æ)
     */
    suspend fun cancelShutdown(): Boolean {
        return withContext(Dispatchers.IO) {
            try {
                Log.d(TAG, "–û—Ç–º–µ–Ω—è–µ–º shutdown...")
                
                val url = URL("http://$HOST:$PORT/cancel")
                val connection = url.openConnection() as HttpURLConnection
                
                connection.apply {
                    requestMethod = "POST"
                    connectTimeout = TIMEOUT
                    readTimeout = TIMEOUT
                    setRequestProperty("Authorization", "Bearer $SECRET_KEY")
                    setRequestProperty("User-Agent", "RemoteShutdown-Android/1.0")
                }
                
                val responseCode = connection.responseCode
                val response = connection.inputStream.bufferedReader().readText()
                
                Log.d(TAG, "Cancel response: $response")
                
                return@withContext responseCode == 200
                
            } catch (e: Exception) {
                Log.e(TAG, "Cancel exception: ${e.message}", e)
                return@withContext false
            }
        }
    }
}
